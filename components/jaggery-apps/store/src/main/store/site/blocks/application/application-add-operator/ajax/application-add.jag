<%
include("/jagg/jagg.jag");

(function () {
    var site = require("/site/conf/site.json");
    var ssoEnabled = site.ssoConfiguration.enabled;
    response.contentType = "application/json; charset=UTF-8";
    var mod, obj, application, applicationId, result, username, tier, callbackUrl, description,
            msg = require("/site/conf/ui-messages.jag"),
            action = request.getParameter("action"),
            user = jagg.getUser(),
            operatorList = null;

    var validation = {
        "action": { type: "safetext"},
        "application": { type: "name"},
    };

    var validation_errors = jagg.validateInputs(validation);

    if(validation_errors != true){
            print({
                error:true,
                message: msg.error.invalidInputs(validation_errors)
            });        
    }else if( request.getMethod() == 'POST' && !jagg.isCSRFTokenValid()){
        print({
            error:true,
            message: msg.error.csrfError
        });
    }            
    else if (action == "addApplication" && request.getMethod() == 'POST') {
        if (!user) {
            if(!ssoEnabled){
		print({
		    error:true,
                    message:msg.error.loginRequired(action)
            	});
	    }
	    return;
        }

        application = request.getParameter("application", "UTF-8");
        applicationId = request.getParameter("applicationId", "UTF-8");
        username = user.username;
        tier = request.getParameter("tier");
        deploymentType = request.getParameter("deploymentType");
        operatorList = request.getParameter("operatorList");


        if(null == request.getParameter("callbackUrl")){
            callbackUrl = "";
        }else{
            callbackUrl = request.getParameter("callbackUrl");
        }        
        description = request.getParameter("description");


//        mod = jagg.module("application");

        var log = new Log();
        log.info("************** Inside Application-add jag *************");
        log.info("************** application : " +application);
        log.info("************** applicationId : " +applicationId);
        log.info("************** username " + username);
        log.info("************** tier " + tier);
        log.info("************** deploymentType " + deploymentType);
        log.info("************** operatorList " + operatorList);
        log.info("************** description " + description);
        log.info("************** callbackUrl " + callbackUrl);


        var log = new Log();
        result = "CREATED"
        log.info("******************* result.status : " + result);


        var mod = jagg.module("manager");
        var storeHostObject = mod.getStoreHostObject(); //get getstoreObj

        result = storeHostObject.operatorApplicationApproval(application, applicationId, username, tier,
                                                        callbackUrl, description, deploymentType, operatorList);

        if (result.error) {
            obj = {
                error: true,
                message: result.error
            };
        } else {
            obj = {
                error: false,
                status: result.status
            }
        }
        print(obj);


        /*        if (!applicationTierList.isEmpty() && applicationTierList.containsKey(tier)) {
                    result = mod.addApplication(username, application, tier, callbackUrl, description);
                    if (result.error) {
                        obj = {
                            error: true,
                            message: result.error
                        };
                    } else {
                        obj = {
                            error: false,
                            status: result.status
                        }
                    }
                } else {
                    var log = new Log();
                    var errorMessage = "Specified application tier " + tier + " does not exist.";
                    log.error(errorMessage);
                    obj = {
                        error: true,
                        message: errorMessage
                    };
                }
                print(obj); */
    } else {
        print({
            error:true,
            message:msg.error.invalidAction(action)
        });
    }
}());
%>
